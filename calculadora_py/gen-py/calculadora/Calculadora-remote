#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  double suma(double num1, double num2)')
    print('  double resta(double num1, double num2)')
    print('  double producto(double num1, double num2)')
    print('  double division(double num1, double num2)')
    print('  double seno(double num)')
    print('  double coseno(double num)')
    print('  double tangente(double num)')
    print('  double arcoseno(double num)')
    print('  double arcocoseno(double num)')
    print('  double arcotangente(double num)')
    print('  double raiz_cuadrada(double num)')
    print('  double potencia(double num1, double num2)')
    print('  double logaritmo(double num1, double num2)')
    print('  double porcentaje(double num1, double num2)')
    print('  double modulo(double num1, double num2)')
    print('   suma_vectores( v1,  v2)')
    print('   resta_vectores( v1,  v2)')
    print('  double producto_escalar( v1,  v2)')
    print('   producto_vectorial( v1,  v2)')
    print('   division_vector_real( v1, double num)')
    print('   suma_matrices( m1,  m2)')
    print('   resta_matrices( m1,  m2)')
    print('   multiplicacion_matrices( m1,  m2)')
    print('   division_matriz_real( m1, double m2)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'suma':
    if len(args) != 2:
        print('suma requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma(eval(args[0]), eval(args[1]),))

elif cmd == 'resta':
    if len(args) != 2:
        print('resta requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta(eval(args[0]), eval(args[1]),))

elif cmd == 'producto':
    if len(args) != 2:
        print('producto requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto(eval(args[0]), eval(args[1]),))

elif cmd == 'division':
    if len(args) != 2:
        print('division requires 2 args')
        sys.exit(1)
    pp.pprint(client.division(eval(args[0]), eval(args[1]),))

elif cmd == 'seno':
    if len(args) != 1:
        print('seno requires 1 args')
        sys.exit(1)
    pp.pprint(client.seno(eval(args[0]),))

elif cmd == 'coseno':
    if len(args) != 1:
        print('coseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.coseno(eval(args[0]),))

elif cmd == 'tangente':
    if len(args) != 1:
        print('tangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.tangente(eval(args[0]),))

elif cmd == 'arcoseno':
    if len(args) != 1:
        print('arcoseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.arcoseno(eval(args[0]),))

elif cmd == 'arcocoseno':
    if len(args) != 1:
        print('arcocoseno requires 1 args')
        sys.exit(1)
    pp.pprint(client.arcocoseno(eval(args[0]),))

elif cmd == 'arcotangente':
    if len(args) != 1:
        print('arcotangente requires 1 args')
        sys.exit(1)
    pp.pprint(client.arcotangente(eval(args[0]),))

elif cmd == 'raiz_cuadrada':
    if len(args) != 1:
        print('raiz_cuadrada requires 1 args')
        sys.exit(1)
    pp.pprint(client.raiz_cuadrada(eval(args[0]),))

elif cmd == 'potencia':
    if len(args) != 2:
        print('potencia requires 2 args')
        sys.exit(1)
    pp.pprint(client.potencia(eval(args[0]), eval(args[1]),))

elif cmd == 'logaritmo':
    if len(args) != 2:
        print('logaritmo requires 2 args')
        sys.exit(1)
    pp.pprint(client.logaritmo(eval(args[0]), eval(args[1]),))

elif cmd == 'porcentaje':
    if len(args) != 2:
        print('porcentaje requires 2 args')
        sys.exit(1)
    pp.pprint(client.porcentaje(eval(args[0]), eval(args[1]),))

elif cmd == 'modulo':
    if len(args) != 2:
        print('modulo requires 2 args')
        sys.exit(1)
    pp.pprint(client.modulo(eval(args[0]), eval(args[1]),))

elif cmd == 'suma_vectores':
    if len(args) != 2:
        print('suma_vectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_vectores(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_vectores':
    if len(args) != 2:
        print('resta_vectores requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_vectores(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_escalar':
    if len(args) != 2:
        print('producto_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_vectorial':
    if len(args) != 2:
        print('producto_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'division_vector_real':
    if len(args) != 2:
        print('division_vector_real requires 2 args')
        sys.exit(1)
    pp.pprint(client.division_vector_real(eval(args[0]), eval(args[1]),))

elif cmd == 'suma_matrices':
    if len(args) != 2:
        print('suma_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_matrices':
    if len(args) != 2:
        print('resta_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'multiplicacion_matrices':
    if len(args) != 2:
        print('multiplicacion_matrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiplicacion_matrices(eval(args[0]), eval(args[1]),))

elif cmd == 'division_matriz_real':
    if len(args) != 2:
        print('division_matriz_real requires 2 args')
        sys.exit(1)
    pp.pprint(client.division_matriz_real(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
