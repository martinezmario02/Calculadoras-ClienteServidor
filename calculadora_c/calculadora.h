/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct float_array {
	float vector[1000];
	int tam;
};
typedef struct float_array float_array;

struct float_matrix {
	float m[1000];
	int tam1;
	int tam2;
};
typedef struct float_matrix float_matrix;

struct suma_1_argument {
	float a;
	float b;
};
typedef struct suma_1_argument suma_1_argument;

struct multiplicacion_1_argument {
	float a;
	float b;
};
typedef struct multiplicacion_1_argument multiplicacion_1_argument;

struct resta_1_argument {
	float a;
	float b;
};
typedef struct resta_1_argument resta_1_argument;

struct division_1_argument {
	float a;
	float b;
};
typedef struct division_1_argument division_1_argument;

struct potencia_1_argument {
	float a;
	float b;
};
typedef struct potencia_1_argument potencia_1_argument;

struct suma_vectores_1_argument {
	float_array a;
	float_array b;
};
typedef struct suma_vectores_1_argument suma_vectores_1_argument;

struct resta_vectores_1_argument {
	float_array a;
	float_array b;
};
typedef struct resta_vectores_1_argument resta_vectores_1_argument;

struct producto_escalar_1_argument {
	float_array a;
	float_array b;
};
typedef struct producto_escalar_1_argument producto_escalar_1_argument;

struct producto_vectorial_1_argument {
	float_array a;
	float_array b;
};
typedef struct producto_vectorial_1_argument producto_vectorial_1_argument;

struct suma_matrices_1_argument {
	float_matrix a;
	float_matrix b;
};
typedef struct suma_matrices_1_argument suma_matrices_1_argument;

struct resta_matrices_1_argument {
	float_matrix a;
	float_matrix b;
};
typedef struct resta_matrices_1_argument resta_matrices_1_argument;

struct multiplicacion_matrices_1_argument {
	float_matrix a;
	float_matrix b;
};
typedef struct multiplicacion_matrices_1_argument multiplicacion_matrices_1_argument;

struct division_matriz_real_1_argument {
	float_matrix a;
	float b;
};
typedef struct division_matriz_real_1_argument division_matriz_real_1_argument;

#define CALCULADORA 0x20000541
#define CALC 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMA 1
extern  float * suma_1(float , float , CLIENT *);
extern  float * suma_1_svc(float , float , struct svc_req *);
#define MULTIPLICACION 2
extern  float * multiplicacion_1(float , float , CLIENT *);
extern  float * multiplicacion_1_svc(float , float , struct svc_req *);
#define RESTA 3
extern  float * resta_1(float , float , CLIENT *);
extern  float * resta_1_svc(float , float , struct svc_req *);
#define DIVISION 4
extern  float * division_1(float , float , CLIENT *);
extern  float * division_1_svc(float , float , struct svc_req *);
#define SENO 5
extern  float * seno_1(float , CLIENT *);
extern  float * seno_1_svc(float , struct svc_req *);
#define COSENO 6
extern  float * coseno_1(float , CLIENT *);
extern  float * coseno_1_svc(float , struct svc_req *);
#define TANGENTE 7
extern  float * tangente_1(float , CLIENT *);
extern  float * tangente_1_svc(float , struct svc_req *);
#define ARCOSENO 8
extern  float * arcoseno_1(float , CLIENT *);
extern  float * arcoseno_1_svc(float , struct svc_req *);
#define ARCOCOSENO 9
extern  float * arcocoseno_1(float , CLIENT *);
extern  float * arcocoseno_1_svc(float , struct svc_req *);
#define ARCOTANGENTE 10
extern  float * arcotangente_1(float , CLIENT *);
extern  float * arcotangente_1_svc(float , struct svc_req *);
#define RAIZ_CUADRADA 11
extern  float * raiz_cuadrada_1(float , CLIENT *);
extern  float * raiz_cuadrada_1_svc(float , struct svc_req *);
#define POTENCIA 12
extern  float * potencia_1(float , float , CLIENT *);
extern  float * potencia_1_svc(float , float , struct svc_req *);
#define SUMA_VECTORES 13
extern  float_array * suma_vectores_1(float_array , float_array , CLIENT *);
extern  float_array * suma_vectores_1_svc(float_array , float_array , struct svc_req *);
#define RESTA_VECTORES 14
extern  float_array * resta_vectores_1(float_array , float_array , CLIENT *);
extern  float_array * resta_vectores_1_svc(float_array , float_array , struct svc_req *);
#define PRODUCTO_ESCALAR 15
extern  float * producto_escalar_1(float_array , float_array , CLIENT *);
extern  float * producto_escalar_1_svc(float_array , float_array , struct svc_req *);
#define PRODUCTO_VECTORIAL 16
extern  float_array * producto_vectorial_1(float_array , float_array , CLIENT *);
extern  float_array * producto_vectorial_1_svc(float_array , float_array , struct svc_req *);
#define SUMA_MATRICES 17
extern  float_matrix * suma_matrices_1(float_matrix , float_matrix , CLIENT *);
extern  float_matrix * suma_matrices_1_svc(float_matrix , float_matrix , struct svc_req *);
#define RESTA_MATRICES 18
extern  float_matrix * resta_matrices_1(float_matrix , float_matrix , CLIENT *);
extern  float_matrix * resta_matrices_1_svc(float_matrix , float_matrix , struct svc_req *);
#define MULTIPLICACION_MATRICES 19
extern  float_matrix * multiplicacion_matrices_1(float_matrix , float_matrix , CLIENT *);
extern  float_matrix * multiplicacion_matrices_1_svc(float_matrix , float_matrix , struct svc_req *);
#define DIVISION_MATRIZ_REAL 20
extern  float_matrix * division_matriz_real_1(float_matrix , float , CLIENT *);
extern  float_matrix * division_matriz_real_1_svc(float_matrix , float , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMA 1
extern  float * suma_1();
extern  float * suma_1_svc();
#define MULTIPLICACION 2
extern  float * multiplicacion_1();
extern  float * multiplicacion_1_svc();
#define RESTA 3
extern  float * resta_1();
extern  float * resta_1_svc();
#define DIVISION 4
extern  float * division_1();
extern  float * division_1_svc();
#define SENO 5
extern  float * seno_1();
extern  float * seno_1_svc();
#define COSENO 6
extern  float * coseno_1();
extern  float * coseno_1_svc();
#define TANGENTE 7
extern  float * tangente_1();
extern  float * tangente_1_svc();
#define ARCOSENO 8
extern  float * arcoseno_1();
extern  float * arcoseno_1_svc();
#define ARCOCOSENO 9
extern  float * arcocoseno_1();
extern  float * arcocoseno_1_svc();
#define ARCOTANGENTE 10
extern  float * arcotangente_1();
extern  float * arcotangente_1_svc();
#define RAIZ_CUADRADA 11
extern  float * raiz_cuadrada_1();
extern  float * raiz_cuadrada_1_svc();
#define POTENCIA 12
extern  float * potencia_1();
extern  float * potencia_1_svc();
#define SUMA_VECTORES 13
extern  float_array * suma_vectores_1();
extern  float_array * suma_vectores_1_svc();
#define RESTA_VECTORES 14
extern  float_array * resta_vectores_1();
extern  float_array * resta_vectores_1_svc();
#define PRODUCTO_ESCALAR 15
extern  float * producto_escalar_1();
extern  float * producto_escalar_1_svc();
#define PRODUCTO_VECTORIAL 16
extern  float_array * producto_vectorial_1();
extern  float_array * producto_vectorial_1_svc();
#define SUMA_MATRICES 17
extern  float_matrix * suma_matrices_1();
extern  float_matrix * suma_matrices_1_svc();
#define RESTA_MATRICES 18
extern  float_matrix * resta_matrices_1();
extern  float_matrix * resta_matrices_1_svc();
#define MULTIPLICACION_MATRICES 19
extern  float_matrix * multiplicacion_matrices_1();
extern  float_matrix * multiplicacion_matrices_1_svc();
#define DIVISION_MATRIZ_REAL 20
extern  float_matrix * division_matriz_real_1();
extern  float_matrix * division_matriz_real_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_float_array (XDR *, float_array*);
extern  bool_t xdr_float_matrix (XDR *, float_matrix*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_multiplicacion_1_argument (XDR *, multiplicacion_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_division_1_argument (XDR *, division_1_argument*);
extern  bool_t xdr_potencia_1_argument (XDR *, potencia_1_argument*);
extern  bool_t xdr_suma_vectores_1_argument (XDR *, suma_vectores_1_argument*);
extern  bool_t xdr_resta_vectores_1_argument (XDR *, resta_vectores_1_argument*);
extern  bool_t xdr_producto_escalar_1_argument (XDR *, producto_escalar_1_argument*);
extern  bool_t xdr_producto_vectorial_1_argument (XDR *, producto_vectorial_1_argument*);
extern  bool_t xdr_suma_matrices_1_argument (XDR *, suma_matrices_1_argument*);
extern  bool_t xdr_resta_matrices_1_argument (XDR *, resta_matrices_1_argument*);
extern  bool_t xdr_multiplicacion_matrices_1_argument (XDR *, multiplicacion_matrices_1_argument*);
extern  bool_t xdr_division_matriz_real_1_argument (XDR *, division_matriz_real_1_argument*);

#else /* K&R C */
extern bool_t xdr_float_array ();
extern bool_t xdr_float_matrix ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_multiplicacion_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_division_1_argument ();
extern bool_t xdr_potencia_1_argument ();
extern bool_t xdr_suma_vectores_1_argument ();
extern bool_t xdr_resta_vectores_1_argument ();
extern bool_t xdr_producto_escalar_1_argument ();
extern bool_t xdr_producto_vectorial_1_argument ();
extern bool_t xdr_suma_matrices_1_argument ();
extern bool_t xdr_resta_matrices_1_argument ();
extern bool_t xdr_multiplicacion_matrices_1_argument ();
extern bool_t xdr_division_matriz_real_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
